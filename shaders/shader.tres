[gd_resource type="VisualShader" load_steps=26 format=3 uid="uid://c5l5qcwh7irn6"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_pofj2"]
size = Vector2(573.156, 407.664)
expression = "if (input < 0.5)
{
	color = (1.0 - input * 2.0) * col1 + (input * 2.0) * col2;	
}
else
{
	color = (1.0 - (input - 0.5) * 2.0) * col2 + ((input - 0.5) * 2.0) * col3;	
}"

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_g45r0"]
constant = Color(0.46, 0.46, 0.46, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_in4jg"]
constant = Color(0.21, 0.13405, 0.0798, 1)

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_1rwas"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_pbbwp"]
input_name = "color"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_y4hra"]
parameter_name = "noiseTextureFrag"
texture_type = 1
texture_repeat = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_hxjkq"]
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_bryhy"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_nlrkf"]
constant = Color(0.0941176, 0.858824, 0.0235294, 1)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_jfc7g"]
parameter_name = "height"
default_value_enabled = true
default_value = 50.0

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_5m8ct"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0), 2, Vector2(0.99, 0.99)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_s0mx1"]
constant = 0.999

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_6m32f"]
constant = 0.001

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_mhuwv"]
parameter_name = "heightTexture"
texture_type = 1
texture_repeat = 2

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_n3mrx"]
size = Vector2(575.349, 241.913)
expression = "uniform mat3 terrain_normal_basis;

vec3 unpack_normalmap(vec4 rgba)
{
	vec3 n = rgba.xzy * 2.0 - vec3(1.0);
	//n.z *= -1.0;
	return n;
}"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ytdbq"]
size = Vector2(733.329, 216.088)
expression = "NORMAL = terrain_normal_basis * unpack_normalmap(texture(terrain_normalmap, offsetUVs));"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_6bx7a"]
operator = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_dlrm8"]
parameter_name = "normalTexture"
texture_type = 1
texture_repeat = 2

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_phbou"]
default_input_values = [0, 0.0, 1, 10.0, 2, 1.0]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_y1fnk"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_u34s2"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_id0kh"]
input_name = "uv"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_le8x2"]
frequency = 0.001
domain_warp_fractal_gain = 0.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_vmxw2"]
noise = SubResource("FastNoiseLite_le8x2")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_dgv43"]
expanded_output_ports = [0]
source = 5
texture = SubResource("NoiseTexture2D_vmxw2")

[resource]
code = "shader_type spatial;
uniform float height = 50;
uniform sampler2D heightTexture : source_color, repeat_disable;
uniform sampler2D normalTexture : source_color, repeat_disable;
uniform sampler2D noiseTextureFrag : source_color, repeat_disable;


// GlobalExpression:0
	uniform mat3 terrain_normal_basis;
	
	vec3 unpack_normalmap(vec4 rgba)
	{
		vec3 n = rgba.xzy * 2.0 - vec3(1.0);
		//n.z *= -1.0;
		return n;
	}

void vertex() {
// Input:4
	vec3 n_out4p0 = VERTEX;


// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;


// FloatParameter:14
	float n_out14p0 = height;


// Input:7
	vec2 n_out7p0 = UV;


// FloatConstant:17
	float n_out17p0 = 0.001000;


// FloatConstant:16
	float n_out16p0 = 0.999000;


// Clamp:15
	vec2 n_out15p0 = clamp(n_out7p0, vec2(n_out17p0), vec2(n_out16p0));


	vec4 n_out9p0;
// Texture2D:9
	n_out9p0 = texture(heightTexture, n_out15p0);
	float n_out9p1 = n_out9p0.r;


// FloatOp:21
	float n_out21p0 = n_out14p0 * n_out9p1;


// VectorCompose:3
	vec3 n_out3p0 = vec3(n_out5p0, n_out21p0, n_out5p2);


	vec3 n_out20p0;
// Expression:20
	n_out20p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out20p0 = terrain_normal_basis * unpack_normalmap(texture(normalTexture, n_out15p0));
	}


// Output:0
	VERTEX = n_out3p0;
	NORMAL = n_out20p0;


}

void fragment() {
// Input:8
	vec2 n_out8p0 = UV;


	vec4 n_out7p0;
// Texture2D:7
	n_out7p0 = texture(noiseTextureFrag, n_out8p0);


// VectorDecompose:14
	float n_out14p0 = vec3(n_out7p0.xyz).x;
	float n_out14p1 = vec3(n_out7p0.xyz).y;
	float n_out14p2 = vec3(n_out7p0.xyz).z;


// ColorConstant:9
	vec4 n_out9p0 = vec4(0.094118, 0.858824, 0.023529, 1.000000);


// ColorConstant:13
	vec4 n_out13p0 = vec4(0.210000, 0.134050, 0.079800, 1.000000);


// ColorConstant:12
	vec4 n_out12p0 = vec4(0.460000, 0.460000, 0.460000, 1.000000);


	vec3 n_out10p0;
// Expression:10
	n_out10p0 = vec3(0.0, 0.0, 0.0);
	{
		if (n_out14p0 < 0.5)
		{
			n_out10p0 = (1.0 - n_out14p0 * 2.0) * vec3(n_out9p0.xyz) + (n_out14p0 * 2.0) * vec3(n_out13p0.xyz);	
		}
		else
		{
			n_out10p0 = (1.0 - (n_out14p0 - 0.5) * 2.0) * vec3(n_out13p0.xyz) + ((n_out14p0 - 0.5) * 2.0) * vec3(n_out12p0.xyz);	
		}
	}


// Output:0
	ALBEDO = n_out10p0;


}
"
graph_offset = Vector2(747.534, 268.395)
nodes/vertex/0/position = Vector2(1240, 420)
nodes/vertex/3/node = SubResource("VisualShaderNodeVectorCompose_phbou")
nodes/vertex/3/position = Vector2(980, 140)
nodes/vertex/4/node = SubResource("VisualShaderNodeInput_y1fnk")
nodes/vertex/4/position = Vector2(320, 60)
nodes/vertex/5/node = SubResource("VisualShaderNodeVectorDecompose_u34s2")
nodes/vertex/5/position = Vector2(680, 140)
nodes/vertex/7/node = SubResource("VisualShaderNodeInput_id0kh")
nodes/vertex/7/position = Vector2(-220, 140)
nodes/vertex/9/node = SubResource("VisualShaderNodeTexture_dgv43")
nodes/vertex/9/position = Vector2(420, 340)
nodes/vertex/14/node = SubResource("VisualShaderNodeFloatParameter_jfc7g")
nodes/vertex/14/position = Vector2(360, 140)
nodes/vertex/15/node = SubResource("VisualShaderNodeClamp_5m8ct")
nodes/vertex/15/position = Vector2(100, 160)
nodes/vertex/16/node = SubResource("VisualShaderNodeFloatConstant_s0mx1")
nodes/vertex/16/position = Vector2(-100, 260)
nodes/vertex/17/node = SubResource("VisualShaderNodeFloatConstant_6m32f")
nodes/vertex/17/position = Vector2(-100, 220)
nodes/vertex/18/node = SubResource("VisualShaderNodeTexture2DParameter_mhuwv")
nodes/vertex/18/position = Vector2(-40, 340)
nodes/vertex/19/node = SubResource("VisualShaderNodeGlobalExpression_n3mrx")
nodes/vertex/19/position = Vector2(1420, 460)
nodes/vertex/19/size = Vector2(575.349, 241.913)
nodes/vertex/19/input_ports = ""
nodes/vertex/19/output_ports = ""
nodes/vertex/19/expression = "uniform mat3 terrain_normal_basis;

vec3 unpack_normalmap(vec4 rgba)
{
	vec3 n = rgba.xzy * 2.0 - vec3(1.0);
	//n.z *= -1.0;
	return n;
}"
nodes/vertex/20/node = SubResource("VisualShaderNodeExpression_ytdbq")
nodes/vertex/20/position = Vector2(400, 640)
nodes/vertex/20/size = Vector2(733.329, 216.088)
nodes/vertex/20/input_ports = "0,3,offsetUVs;1,8,terrain_normalmap;"
nodes/vertex/20/output_ports = "0,4,NORMAL;"
nodes/vertex/20/expression = "NORMAL = terrain_normal_basis * unpack_normalmap(texture(terrain_normalmap, offsetUVs));"
nodes/vertex/21/node = SubResource("VisualShaderNodeFloatOp_6bx7a")
nodes/vertex/21/position = Vector2(680, 300)
nodes/vertex/22/node = SubResource("VisualShaderNodeTexture2DParameter_dlrm8")
nodes/vertex/22/position = Vector2(-40, 640)
nodes/vertex/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 5, 0, 5, 0, 3, 0, 5, 2, 3, 2, 7, 0, 15, 0, 15, 0, 9, 0, 16, 0, 15, 2, 17, 0, 15, 1, 18, 0, 9, 2, 14, 0, 21, 0, 9, 1, 21, 1, 21, 0, 3, 1, 15, 0, 20, 0, 22, 0, 20, 1, 20, 0, 0, 1)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_pbbwp")
nodes/fragment/5/position = Vector2(-40, 140)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture2DParameter_y4hra")
nodes/fragment/6/position = Vector2(-1080, 40)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture_hxjkq")
nodes/fragment/7/position = Vector2(-700, 20)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_bryhy")
nodes/fragment/8/position = Vector2(-1080, -40)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorConstant_nlrkf")
nodes/fragment/9/position = Vector2(-460, 340)
nodes/fragment/10/node = SubResource("VisualShaderNodeExpression_pofj2")
nodes/fragment/10/position = Vector2(-240, 260)
nodes/fragment/10/size = Vector2(573.156, 407.664)
nodes/fragment/10/input_ports = "0,0,input;1,4,col1;2,4,col2;3,4,col3;"
nodes/fragment/10/output_ports = "0,4,color;"
nodes/fragment/10/expression = "if (input < 0.5)
{
	color = (1.0 - input * 2.0) * col1 + (input * 2.0) * col2;	
}
else
{
	color = (1.0 - (input - 0.5) * 2.0) * col2 + ((input - 0.5) * 2.0) * col3;	
}"
nodes/fragment/12/node = SubResource("VisualShaderNodeColorConstant_g45r0")
nodes/fragment/12/position = Vector2(-460, 500)
nodes/fragment/13/node = SubResource("VisualShaderNodeColorConstant_in4jg")
nodes/fragment/13/position = Vector2(-460, 420)
nodes/fragment/14/node = SubResource("VisualShaderNodeVectorDecompose_1rwas")
nodes/fragment/14/position = Vector2(-480, 80)
nodes/fragment/connections = PackedInt32Array(6, 0, 7, 2, 8, 0, 7, 0, 12, 0, 10, 3, 13, 0, 10, 2, 9, 0, 10, 1, 10, 0, 0, 0, 7, 0, 14, 0, 14, 0, 10, 0)
